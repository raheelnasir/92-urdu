@page "/addsher"
@using View.Data
@using WebAPI

@inject AuthenticationStateProvider asp;
@inject ISetContentDetails isd;
@inject IPostVerses ipv;

@using Entities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Authentication
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Identity.Client;
@using Microsoft.IdentityModel.Tokens;
@using System.Diagnostics.Eventing.Reader;
@using System.Security.Claims;
<h3>Dynamic Input Fields</h3>


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            @foreach (var inputValue in inputValues)
            {
                <div cla>
                    <input type="text" style="box-shadow:2px 2px 2px 2px gray" class="p-4 m-4" @bind="inputValue.Value1" />
                    <input type="text" style="box-shadow:2px 2px 2px 2px gray" class="p-4 m-4" @bind="inputValue.Value2" />

                    <button @onclick="() => RemoveInputValue(inputValue)">Remove Complete Couplet</button>
                </div>
            }
        </div>
      

       
    </div>
</div>
<input type="name" @bind="ECD.ContentName" class="p-1 m-3" />

<button @onclick="PostSher">CLICK POST</button>


<div>
    <input type="text" style="box-shadow:2px 2px 2px 2px gray" class="p-4 m-4" @bind="newInputValue" />
    <input type="text" style="box-shadow:2px 2px 2px 2px gray" class="p-4 m-4" @bind="newInputValue2" />

    <button @onclick="AddInputValue">Add</button>
</div>

@code {
    public class Verses
    {
        public string? Verse1;
        public string? Verse2;
    };
    private List<InputModel> inputValues = new List<InputModel>();
    private string newInputValue = "";
    private string newInputValue2 = "";
    private async void AddInputValue()
    {
        if (!string.IsNullOrEmpty(newInputValue))
        {
            inputValues.Add(new InputModel { Value1 = newInputValue,Value2=newInputValue2 });
            newInputValue = "";
            newInputValue2 = "";


        }
    }

    private void RemoveInputValue(InputModel inputValue)
    {
        inputValues.Remove(inputValue);
    }

    EntContentDetails ECD = new EntContentDetails();

    public async Task PostSher()
    {
        try
        {
            Random rand = new Random();
            var cid = rand.Next(100000, 999999);
            var auth = await asp.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst("UId")?.Value;
            ECD.UId = Convert.ToInt32(uid);
            ECD.ContentType = 'P';
            int CID = await isd.SetContentDetails(ECD);
            Console.WriteLine(CID);

            foreach (var input in inputValues)
            {
                EntVerse obj = new EntVerse();
                obj.Verse1 = input.Value1;
                obj.Verse2 = input.Value2;
                obj.ContentId = Convert.ToInt32(CID);
                await ipv.PostVerses(obj);
                Console.WriteLine(obj.ContentId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex}");
        }
    }


    public class InputModel
    {
        public string? Value1 { get; set; }
        public string? Value2 { get; set; }
    }

}
