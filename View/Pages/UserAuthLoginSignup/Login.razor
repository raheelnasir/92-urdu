@page "/login"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authstateprovider
@inject NavigationManager nav
@layout CustomUserLayout


<div class="row w-100 d-flex flex-row justify-content-center h-100" dir="ltr">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4  m-auto mt-5 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3 form-floating">
            <input @bind="model.UserName" class="form-control" id="userName" placeholder="User Name" />
            <label for="userName">User Name</label>
        </div>

        <div class="mb-3 form-floating">
            <input @bind="model.Password" type="password" class="form-control" id="password" placeholder="Password" />
            <label for="password">Password</label>
        </div>

        <p class="mb-3 text-danger">
            @Message

        </p>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" style=' display:@(displayer2);' class="btn btn-primary">Login</button>
            <button class="btn btn-primary" style=' display:@(displayer);' type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Processing...
            </button>
            <button @onclick="Move" class="btn btn-success">Register Now</button>

        </div>
    </div>
</div>


@code {
    public string Message { get; set; }
    public string? displayer = "none";
    public string? displayer2 = "block";

    public void Move()
    {
        nav.NavigateTo("/signupuser", true);
    }
    public class Model
    {
        public string? UserName { get; set; }
        public string? Password { get; set; }
    }
    public Model model = new Model();



    public async Task Authenticate()
    {
        displayer = "block";
        displayer2 = "none";

        var userAccount = await userAccountService.GetByUserName(model.UserName, model.Password);

        if (userAccount.UserName == null || userAccount.Role == null)
        {
            Message = "Invalid Username or Password";
            await Task.Delay(2500);
            displayer = "none";
            displayer2 = "block";
            return;
        };
        var customÄuthStateProvider = (CustomAuthenticationStateProvider)authstateprovider;
        await Task.Delay(3500);

        await customÄuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role,
                UId = userAccount.UId
            }
        );

        nav.NavigateTo("/", true);
    }
}

