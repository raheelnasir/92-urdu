@using View.Data
@using WebAPI
@inject IPostPhrases ipp
@attribute [Authorize(Roles = "Poet")]
@layout View.Pages.MainPagesCustomLayout.CustomUserLayout
@inject AuthenticationStateProvider asp;
@using Entities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Authentication
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Identity.Client;
@using Microsoft.IdentityModel.Tokens;
@using System.Diagnostics.Eventing.Reader;
@using System.Security.Claims;


<div class="mb-3 text-center">
    <h3>Phrases</h3>
</div>

<div class="col-lg-4 offset-lg-4 pt-4 pb-4  m-auto mt-5 border" dir="rtl">
 
    <hr />
    <div class="mb-3">
        <label>
            Misra 1
        </label>
        <input type="text" class=" form-control" @bind="Phrase.Verse1" />
    </div>
    <div class="mb-3">
        <label>
            Misra 2
        </label>
        <input type="text" class=" form-control" @bind="Phrase.Verse2" />
    </div>

    <button @onclick="PostSher" class="btn btn-success">Post Now</button>
</div>




@code {

    private string newInputValue = "";
    private string newInputValue2 = "";


    EntPhrases Phrase = new EntPhrases();


    public async Task PostSher()
    {
        try
        {
            var auth = await asp.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst("UId")?.Value;
            Phrase.UId = Convert.ToInt32(uid);
            if(Phrase.UId == 0 || Phrase.UId == null)
            {
                await PostSher();
            }
            else
            {
                var response = ipp.PostPhrases(Phrase);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error : {ex}");
        }
    }


 
}
