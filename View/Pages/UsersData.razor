@page "/usersdata"
@using View.Data
@using Entities
@inject IGetUsersData iup
@inject AuthenticationStateProvider aspas
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Authentication
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Identity.Client;
@using Microsoft.IdentityModel.Tokens;
@using System.Diagnostics.Eventing.Reader;
@using System.Security.Claims;
@using View.Authentication;
@inject IUpdateUsersProfileData iupd
@attribute [Authorize(Roles = "Administrator,Editor,Chief Editor")]
@inject IDeleteUsersProfile iudp
<div style="overflow:hidden; max-width:80vw;">

    <h3>UsersData @userName View</h3>



<AuthorizeView>
    <Authorized>

        <div class="table-responsive" style="overflow:scroll; ">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>UId</th>
                        <th>UserName</th>
                        <th>Role</th>
                        <th>FirstName</th>
                        <th>LastName</th>
                        <th>EmailAddress</th>
                        <th>PhoneNumber</th>
                        <th>DateOfBirth</th>
                        <th>City</th>
                        <th>Area</th>
                        <th>Location</th>
                        <th>IsActive</th>
                                                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (data != null)
                    {
                        @foreach (var userProfile in data)
                        {
                            <tr>
                                <td>@userProfile.UId</td>
                                <td>@userProfile.UserName</td>
                                <td>
                                    @if (userProfile == editingUser)
                                    {
                                        <select class="form-control" @bind="editingUser.Role">
                                            <option value="User">User</option>
                                            <option value="Editor">Editor</option>
                                        </select>
                                    }
                                    else
                                    {
                                        @userProfile.Role
                                    }
                                </td>
                                <td>@userProfile.FirstName</td>
                                <td>@userProfile.LastName</td>
                                <td>@userProfile.EmailAddress</td>
                                <td>@userProfile.PhoneNumber</td>
                                <td>@userProfile.DateOfBirth.ToShortDateString()</td>
                                <td>@userProfile.City</td>
                                <td>@userProfile.Area</td>
                                <td>@userProfile.Location</td>
                                <td>
                                    @if (userProfile == editingUser)
                                    {
                                        <select class="form-control" @bind="editingUser.IsActive">
                                            <option value="true">True</option>
                                            <option value="false">False</option>
                                        </select>
                                    }
                                    else
                                    {
                                        @userProfile.IsActive
                                    }
                                </td>
                                <td>
                                    @if (userProfile == editingUser)
                                    {
                                        <button class="btn btn-primary" @onclick="UpdateUser">Update</button>
                                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-info" @onclick="() => EditUser(userProfile)">Edit</button>
                                        <button class="btn btn-danger" @onclick="() => DeleteUser(userProfile.UId)">Delete</button>
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                            <div class="text-center" style="margin-top:40vh; margin-left:40vw; margin-right:60vw; margin-bottom:60vh;">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading Data...</span>

                                </div>
                                <p>
                                    Loading
                                </p>
                            </div>
                    }
                </tbody>
            </table>
        </div>

    </Authorized>
    <NotAuthorized>
        <h1>Not Authorized</h1>
    </NotAuthorized>
</AuthorizeView>
</div>


<!-- Modal for Editing User -->
@if (editingUser != null)
{
    <div class="modal fade show" style="display: block;" id="editUserModal" tabindex="-1" role="dialog" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                    <button type="button" class="close" @onclick="CancelEdit">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editUserName">User Name</label>
                        <input type="text" class="form-control" id="editUserName" @bind="editingUser.UserName" disabled />
                    </div>

                    <div class="form-group">
                        <label for="editIsActive">Is Active</label>
                        <select class="form-control" id="editIsActive" @onchange="ToggleIsActive">
                            <option value="true" selected="@editingUser.IsActive">True</option>
                            <option value="false" selected="@(!editingUser.IsActive)">False</option>
                        </select>
                    </div>



                    <div class="form-group">
                        <label for="editRole">Role</label>
                        <select class="form-control" id="editRole" @bind="editingUser.Role">
                            <option value="User">User</option>
                            <option value="Editor">Editor</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateUser">Update</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public List<EntUserProfile>? data = null;
    private EntUserProfile? editingUser; // Store the user being edited

    public string? userName{ get; set; }
    private string? userRole{ get; set; }
    EntUserProfile updateEnt = new EntUserProfile();

    protected override async Task OnInitializedAsync()
    {
        var authState = await aspas.GetAuthenticationStateAsync();
        userName = authState.User.FindFirst(ClaimTypes.Name)?.Value;
        Console.WriteLine(authState);
        // Access the user's role from claims
        userRole = authState.User.FindFirst(ClaimTypes.Role)?.Value;
        data = await iup.GetUsersData(userRole);
    }

    public void EditUser(EntUserProfile user)
    {
        editingUser = new EntUserProfile
            {
                UId = user.UId,
                UserName = user.UserName,
                Role = user.Role,
                IsActive = user.IsActive
            };
    }
    private void ToggleIsActive(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value);
        if(e.Value.ToString()== "true")
        {
            editingUser.IsActive = true;
        }
        else
        {
            editingUser.IsActive = false;

            
        }
    }


    public void UpdateUser()
    {
 
        Console.WriteLine(editingUser.Role);
        Console.WriteLine(editingUser.IsActive);
        iupd.UpdateUsersProfileData(editingUser);
        editingUser = null;
    }

    public void CancelEdit()
    {
        // Cancel the editing process and close the modal
        editingUser = null;
    }

    private async void DeleteUser(int userId)
    {
        EntUserProfile ent = new EntUserProfile();
        ent.UId = userId;
        ent.Role = userRole;

        await  iudp.DeleteUsersProfileData(ent);
        Console.WriteLine(ent);
    }
}
