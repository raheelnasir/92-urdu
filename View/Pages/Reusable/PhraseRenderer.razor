<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="mb-0 mt-0 d-flex flex-column">

            <div class="d-flex justify-content-between">
                @foreach (var word in (Misra1 ?? string.Empty).ToString().Split(' '))
                {
                    <div class="m-2 mt-0 mb-0 urdu">
                        <button type="button" @onclick="()=>GetMeaning(word)" class="urdu h4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @word
                        </button>
                        <div class="dropdown-menu mt-1 small">
                            <a class="dropdown-item urdu" data-toggle="popover" title="@word" data-content="@Meaning">
                                @Meaning
                            </a>
                        </div>
                    </div>
                }
            </div>

            <div class="d-flex justify-content-between">
                @foreach (var word2 in (Misra2 ?? string.Empty).ToString().Split(' '))
                {
                    <div class="m-2 mb-0 mt-0 urdu">
                        <button type="button" @onclick="()=>GetMeaning(word2)" class="urdu h4" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @word2
                        </button>
                        <div class="dropdown-menu m-1">
                            <a class="dropdown-item urdu" @onclick="()=>GetMeaning(word2)" data-toggle="popover" title="@word2" data-content="@Meaning">
                                @Meaning
                            </a>
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
</div>


    @code {
    [Parameter] public string? Misra1 { get; set; }
    [Parameter] public string? Misra2 { get; set; }
    public string? Meaning { get; set; }
    public string? Meanings { get; set; }

    public async Task GetMeaning(string word)
    {
        Meaning = await DALWordDictionary.GetWordMeaning(word);
        Meanings = word;
        if (string.IsNullOrEmpty(Meaning))
        {
            Meaning = word;
        }
    }
}
