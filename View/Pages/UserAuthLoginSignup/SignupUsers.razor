@page "/signupuser"
@inject NavigationManager nav
@inject ICreateUser iup
@layout CustomUserLayout

<div class="row w-100 align-items-center" dir="ltr">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border mt-4">
        <div class="mb-3 text-center">
            <h3>Signup</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>

        <div class="mb-3">
            <label>First Name</label>
            <input @bind="model.FirstName" class="form-control" placeholder="First Name" />
        </div>

        <div class="mb-3">
            <label>Last Name</label>
            <input @bind="model.LastName" class="form-control" placeholder="Last Name" />
        </div>

        <div class="mb-3">
            <label>Email Address</label>
            <input @bind="model.EmailAddress" class="form-control" placeholder="Email Address" />
        </div>

        <p style="color:red">@outputMessage</p>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="SignupUser" style=' display:@(displayer2);' class="btn btn-primary">Signup</button>
            <button class="btn btn-primary" style=' display:@(displayer);' type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Processing...
            </button>  <a href="/login">Already have an account? Login here.</a>
        </div>
    </div>
</div>

@code {
    public string? displayer = "none";
    public string? displayer2 = "block";
    string outputMessage = "";
    Entities.EntUserProfile model = new Entities.EntUserProfile();

    public async Task SignupUser()
    {
        try
        {
            displayer = "block";
            displayer2 = "none";

            // Check if all required fields are filled
            if (string.IsNullOrEmpty(model.UserName) ||
                string.IsNullOrEmpty(model.Password) ||
                string.IsNullOrEmpty(model.FirstName) ||
                string.IsNullOrEmpty(model.LastName) ||
                string.IsNullOrEmpty(model.EmailAddress))
            {
                outputMessage = "Please fill in all the required fields.";
                await Task.Delay(1500);
                displayer = "none";
                displayer2 = "block";
                return;
            }

            // Validate that First Name and Last Name are in Urdu
            if (!IsUrdu(model.FirstName) || !IsUrdu(model.LastName))
            {
                outputMessage = "First Name and Last Name must be in Urdu.";
                return;
            }

            Random rand = new Random();
            model.UId = rand.Next(100000, 999999);

            var response = await iup.CreateUser(model);
            outputMessage = response.Message;

            // Check if the response is successful before navigating
            if (string.IsNullOrEmpty(response.Message))
            {
                // Navigate to the login page only if the response is successful
                nav.NavigateTo("/login", true);
            }
            else if(response.Message=="User registered successfully")
            {
                nav.NavigateTo("/login", true);

            }
            else
            {
                // Handle unsuccessful response scenarios
                outputMessage = $"{response.Message}";
            }
            await Task.Delay(1500);
            displayer = "none";
            displayer2 = "block";
        }
        catch (Exception ex)
        {
            // Log the exception
            await Task.Delay(1500);
            displayer = "none";
            displayer2 = "block";
            outputMessage = $"Sign Up Failed Catch: {ex.Message}";
        }
    }

    // Custom method to check if a string contains Urdu characters
    bool IsUrdu(string input)
    {
        // Customize the regular expression based on your Urdu character set
        string urduPattern = @"[\u0600-\u06FF]+";
        return System.Text.RegularExpressions.Regex.IsMatch(input, urduPattern);
    }
}
